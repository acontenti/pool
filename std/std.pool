null ::= `null`;
void ::= `void`;
true ::= `true`;
false ::= `false`;

Class ::= `Class`;
Class..extend ::= `Class.extend`;
Class..new ::= `Class.new`;
Class..toString ::= `Class.toString`;
Class.subclassOf ::= `Class.subclassOf`;
Class.superclassOf ::= `Class.superclassOf`;

Object ::= `Object`;
Object..instanceOf ::= `Object.instanceOf`;
Object..toString ::= `Object.toString`;
Object..type ::= `Object.type`;
Object..print ::= `Object.print`;
Object..println ::= `Object.println`;
Object..!= ::= (this, other) : {
    this.==(other).!();
};
Object..get ::= `Object.get`;
Object..delete ::= `Object.delete`;
Object..set ::= `Object.set`;

Bool ::= `Bool`;
Bool..toString ::= `Bool.toString`;
Bool..! ::= `Bool.!`;
Bool..not ::= `Bool.!`;
Bool..|| ::= `Bool.||`;
Bool..&& ::= `Bool.&&`;
Bool..or ::= `Bool.||`;
Bool..and ::= `Bool.&&`;
Bool..== ::= `Bool.==`;
Bool..then ::= `Bool.then`;
Bool..thenElse ::= `Bool.thenElse`;
Bool..new ::= null;
Bool..get ::= null;
Bool..delete ::= null;
Bool..set ::= null;

Array ::= `Array`;
Array..init ::= `Array.init`;
Array..at ::= `Array.at`;
Array..forEach ::= `Array.forEach`;
Array..push ::= `Array.push`;
Array..toString ::= `Array.toString`;
Array..length ::= `Array.length`;
Array..get ::= null;
Array..delete ::= null;
Array..set ::= null;

Integer ::= `Integer`;
Integer..+ ::= `Integer.+`;
Integer..- ::= `Integer.-`;
Integer..== ::= `Integer.==`;
Integer..< ::= `Integer.<`;
Integer..<= ::= (this, other) : {
    this.<(other).||(this.==(other)).!();
};
Integer..> ::= (this, other) : {
    this.<=(other).!();
};
Integer..>= ::= (this, other) : {
    this.<(other).!();
};
Integer..toString ::= `Integer.toString`;
Integer..to ::= (this, end) : {
    end.instanceOf(Integer).!().then({
        throw("Integer.to argument must be a Integer");
    });
    i := this;
    array := Array.new();
    {i.<(end);}.whileDo({
        array.push(i);
        i := i.+(1);
    });
    array;
};
Integer..toInclusive ::= (this, end) : {
    this.to(end.+(1));
};
Integer..new ::= null;
Integer..get ::= null;
Integer..delete ::= null;
Integer..set ::= null;

Decimal ::= `Decimal`;
Decimal..+ ::= `Decimal.+`;
Decimal..- ::= `Decimal.-`;
Decimal..== ::= `Decimal.==`;
Decimal..< ::= `Decimal.<`;
Decimal..<= ::= (this, other) : {
    this.<(other).||(this.==(other)).!();
};
Decimal..> ::= (this, other) : {
    this.<=(other).!();
};
Decimal..>= ::= (this, other) : {
    this.<(other).!();
};
Decimal..toString ::= `Decimal.toString`;
Decimal..new ::= null;
Decimal..get ::= null;
Decimal..delete ::= null;
Decimal..set ::= null;

String ::= `String`;
String..+ ::= `String.+`;
String..== ::= `String.==`;
String..toString ::= `String.toString`;
String..length ::= `String.length`;
String..new ::= null;
String..get ::= null;
String..delete ::= null;
String..set ::= null;

Block ::= `Block`;
Block..new ::= null;
Block..whileDo ::= `Block.whileDo`;
Block..doWhile ::= `Block.doWhile`;

Function ::= `Function`;
Function..classmethod ::= `Function.classmethod`;
Function..staticmethod ::= `Function.staticmethod`;
Function..toString ::= `Function.toString`;
Function..new ::= null;
Function..get ::= null;
Function..delete ::= null;
Function..set ::= null;

Void ::= `Void`;
Void..toString ::= (this) : {"void";};
Void..new ::= null;
Void..get ::= null;
Void..delete ::= null;
Void..set ::= null;

Nothing ::= `Nothing`;
Nothing..toString ::= (this) : {"null";};
Nothing..new ::= null;
Nothing..delete ::= null;
Nothing..get ::= null;
Nothing..set ::= null;

input ::= `input`;
throw ::= `throw`;
tryCatch ::= `tryCatch`;
assert ::= (test, message) : {
    test.!().then({
        throw(message);
    });
};
dlopen ::= `dlopen`;
dlopenx ::= `dlopenx`;