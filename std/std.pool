true ::= $True;
false ::= $False;
null ::= $Null;

Object ::= $Class_extendNative(null, $ObjectClass, {
    getContextInfo ::= $Object_getContextInfo;
    getClass ::= $Object_getClass;
    getRepr ::= $Object_getRepr;
    print ::= $Object_print;
    println ::= $Object_println;
    ?? ::= $Object_qq;
    == ::= $Object_eqeq;
    != ::= (this, other) : {
        this.==(other).!();
    };
    get ::= $Object_get;
    delete ::= $Object_delete;
    set ::= $Object_set;
};

Class ::= $Class_extendNative(Object, $ClassClass, {
    extend ::= $Class_extend;
    extendNative ::= $Class_extendNative;
    new ::= $Class_new;
    getSuper ::= $Class_getSuper;
    getRepr ::= $Class_getRepr;
    subclassOf ::= $Class_subclassOf;
    superclassOf ::= $Class_superclassOf;
});

Module ::= Object.extendNative($ModuleClass, {
    getId ::= $Module_getId;
    inject ::= $Module_inject;
    extend ::= null;
    new ::= null;
    delete ::= null;
    set ::= null;
});

Bool ::= Object.extendNative($BooleanClass, {
    getRepr ::= $Bool_getRepr;
    ! ::= $Bool_not;
    not ::= $Bool_not;
    || ::= $Bool_oror;
    && ::= $Bool_andand;
    or ::= $Bool_oror;
    and ::= $Bool_andand;
    == ::= $Bool_eqeq;
    then ::= $Bool_then;
    thenElse ::= $Bool_thenElse;
    ? ::= $Bool_q;
    extend ::= null;
    new ::= null;
    delete ::= null;
};

Array ::= Object.extendNative($ArrayClass, {
    at ::= $Array_at;
    forEach ::= $Array_forEach;
    push ::= $Array_push;
    toString ::= $Array_toString;
    getRepr ::= $Array_getRepr;
    length ::= $Array_length;
    new ::= null;
    delete ::= null;
});

Number ::= Object.extend("Number", {
    == ::= $Number_eqeq;
    < ::= $Number_lt;
    <= ::= (this, other: class) : {
        this.<(other).||(this.==(other));
    };
    > ::= (this, other: class) : {
        this.<=(other).!();
    };
    >= ::= (this, other: class) : {
        this.<(other).!();
    };
    + ::= $Number_plus;
    - ::= $Number_minus;
    * ::= $Number_times;
    / ::= $Number_div;
    % ::= $Number_mod;
    ** ::= $Number_pow;
    pow ::= $Number_pow;
    abs ::= $Number_abs;
    neg ::= $Number_neg;
    getRepr ::= $Number_getRepr;
    extend ::= null;
    new ::= null;
    delete ::= null;
});

Integer ::= $newClass("Integer", $Integer_$new, Number, {
    | ::= $Integer_or;
    & ::= $Integer_and;
    ^ ::= $Integer_xor;
    ~ ::= $Integer_inv;
    << ::= $Integer_lshift;
    >> ::= $Integer_rshift;
    to ::= (this, end: class) : {
        i := this;
        array := [];
        {i.<(end);}.whileDo({
            array.push(i);
            i := i.+(1);
        });
        array;
    };
    toInclusive ::= (this, end: class) : {
        this.to(end.+(1));
    };
    extend ::= null;
    new ::= null;
    delete ::= null;
});

Decimal ::= $newClass("Decimal", $Decimal_$new, Number, {
    extend ::= null;
    new ::= null;
    delete ::= null;
});

String..+ ::= $String_plus;
String..== ::= $String_eqeq;
String..toString ::= $String_toString;
String..getRepr ::= $String_getRepr;
String..length ::= $String_length;
String..extend ::= null;
String..new ::= null;
String..delete ::= null;

Function..classmethod ::= $Function_classmethod;
Function..staticmethod ::= $Function_staticmethod;
Function..getRepr ::= $Function_getRepr;
Function..whileDo ::= $Function_whileDo;
Function..doWhile ::= $Function_doWhile;
Function..return ::= $Function_return;
Function..extend ::= null;
Function..new ::= null;

Nothing..toString ::= (this) : {"null";};
Nothing..getRepr ::= (this) : {"null";};
Nothing..== ::= (this, other) : {
    null.==(other);
};
Nothing..extend ::= null;
Nothing..new ::= null;
Nothing..delete ::= null;
Nothing..get ::= null;
Nothing..set ::= null;

input ::= $input;
throw ::= $throw;
tryCatch ::= $tryCatch;
assert ::= (test: Bool, message: String) : {
    test.!().then({
        throw(message);
    });
};
assertNot ::= (test: Bool, message: String) : {
    test.then({
        throw(message);
    });
};
assertFail ::= (test: Function, message: String) : {
    thrown := false;
    tryCatch({
        test();
    }, (error) : {
        thrown := true;
    });
    assert(thrown, message);
};
loadLibrary ::= $loadLibrary;
loadLibraryFile ::= $loadLibraryFile;

// Exported variables
exported.Object ::= Object;
exported.Class ::= Class;
exported.Boolean ::= Boolean;
exported.Number ::= Number;
exported.Integer ::= Integer;
exported.Decimal ::= Decimal;
exported.String ::= String;
exported.Module ::= Module;
exported.Function ::= Function;
exported.Array ::= Array;
exported.Nothing ::= Nothing;
exported.true ::= true;
exported.false ::= false;
exported.null ::= null;
exported.input ::= input;
exported.throw ::= throw;
exported.tryCatch ::= tryCatch;
exported.assert ::= assert;
exported.assertNot ::= assertNot;
exported.assertFail ::= assertFail;
exported.loadLibrary ::= loadLibrary;
exported.loadLibraryFile ::= loadLibraryFile;
