Object..instanceOf ::= `Object.instanceOf`();
Object..toString ::= `Object.toString`();
Object..getContextInfo ::= `Object.getContextInfo`();
Object..getClass ::= `Object.getClass`();
Object..getRepr ::= `Object.getRepr`();
Object..print ::= `Object.print`();
Object..println ::= `Object.println`();
Object..?? ::= `Object.??`();
Object..== ::= `Object.==`();
Object..!= ::= (this, other) : {
    this.==(other).!();
};
Object..get ::= `Object.get`();
Object..delete ::= `Object.delete`();
Object..set ::= `Object.set`();

Class..extend ::= `Class.extend`();
Class..new ::= `Class.new`();
Class..getSuper ::= `Class.getSuper`();
Class..getRepr ::= `Class.getRepr`();
Class..subclassOf ::= `Class.subclassOf`();
Class..superclassOf ::= `Class.superclassOf`();

Bool..getRepr ::= `Bool.getRepr`();
Bool..! ::= `Bool.!`();
Bool..not ::= `Bool.!`();
Bool..|| ::= `Bool.||`();
Bool..&& ::= `Bool.&&`();
Bool..or ::= `Bool.||`();
Bool..and ::= `Bool.&&`();
Bool..== ::= `Bool.==`();
Bool..then ::= `Bool.then`();
Bool..thenElse ::= `Bool.thenElse`();
Bool..? ::= `Bool.?`();
Bool..extend ::= null;
Bool..new ::= null;
Bool..delete ::= null;

Array..at ::= `Array.at`();
Array..forEach ::= `Array.forEach`();
Array..push ::= `Array.push`();
Array..toString ::= `Array.toString`();
Array..getRepr ::= `Array.getRepr`();
Array..length ::= `Array.length`();
Array..new ::= null;
Array..delete ::= null;

Number ::= Object.extend("Number", {
    == ::= `Number.==`();
    < ::= `Number.<`();
    <= ::= (this, other: class) : {
        this.<(other).||(this.==(other));
    };
    > ::= (this, other: class) : {
        this.<=(other).!();
    };
    >= ::= (this, other: class) : {
        this.<(other).!();
    };
    + ::= `Number.+`();
    - ::= `Number.-`();
    * ::= `Number.*`();
    / ::= `Number./`();
    % ::= `Number.%`();
    ** ::= `Number.**`();
    pow ::= `Number.**`();
    abs ::= `Number.abs`();
    neg ::= `Number.neg`();
    getRepr ::= `Number.getRepr`();
    extend ::= null;
    new ::= null;
    delete ::= null;
});

Integer ::= newClass("Integer", `Integer`, Number, {
    | ::= `Integer.|`();
    & ::= `Integer.&`();
    ^ ::= `Integer.^`();
    ~ ::= `Integer.~`();
    << ::= `Integer.<<`();
    >> ::= `Integer.>>`();
    to ::= (this, end: class) : {
        i := this;
        array := [];
        {i.<(end);}.whileDo({
            array.push(i);
            i := i.+(1);
        });
        array;
    };
    toInclusive ::= (this, end: class) : {
        this.to(end.+(1));
    };
    extend ::= null;
    new ::= null;
    delete ::= null;
});

Decimal ::= newClass("Decimal", `Decimal`, Number, {
    extend ::= null;
    new ::= null;
    delete ::= null;
});

String..+ ::= `String.+`();
String..== ::= `String.==`();
String..toString ::= `String.toString`();
String..getRepr ::= `String.getRepr`();
String..length ::= `String.length`();
String..extend ::= null;
String..new ::= null;
String..delete ::= null;

Function..classmethod ::= `Function.classmethod`();
Function..staticmethod ::= `Function.staticmethod`();
Function..getRepr ::= `Function.getRepr`();
Function..whileDo ::= `Function.whileDo`();
Function..doWhile ::= `Function.doWhile`();
Function..return ::= `Function.return`();
Function..extend ::= null;
Function..new ::= null;

Nothing..toString ::= (this) : {"null";};
Nothing..getRepr ::= (this) : {"null";};
Nothing..== ::= (this, other) : {
    null.==(other);
};
Nothing..extend ::= null;
Nothing..new ::= null;
Nothing..delete ::= null;
Nothing..get ::= null;
Nothing..set ::= null;

input ::= `input`();
throw ::= `throw`();
tryCatch ::= `tryCatch`();
assert ::= (test, message: String) : {
    test.!().then({
        throw(message);
    });
};
loadLibrary ::= `loadLibrary`();
loadLibraryFile ::= `loadLibraryFile`();
