std := importStd();

Object..??0 := (this) : {
    this.??(0);
};

std.getContextInfo().println();

Integer..>0 := (this) : {
    this.>(0);
};

ret := (x) : {
    x := x.??0();
    x.println();
    x.>0().thenElse({
        "Out: OK".println();
    },{
        "Out: NO".println();
        (x.<(0)).then({
            ret.return();
        });
    });
    x.>0().?("OK", "NO");
};
ret(+1).println();
ret(0).println();
ret(-1).println();
ret(null).println();

Number.getContextInfo().println();

f := (x: String) : {
    x.println();
};
f.println();
f("testx");

"Integer.super = ".+(Integer.super.+).println();

a := [0, 1, 2, 3];
b := 1.+(a.length());
b.println();

fun := (x) : {x;};
fun := (x, y) : {
      b := x.+(y);
      c := {
          d := 2;
    };
};
empty := ():{};
empty().println();
():{}().println();
empty := {};
empty().println();
{}().println();
fun.println();
//fun.b.println();
res := fun(100, 100);
fun.println();
//fun.b.println();
res.println();

z := {
    bb := 300;
    c := {
        d := 2;
    };;
};
"z.getContextInfo() = ".print();
z.getContextInfo().println();
//z.b.println();
res := z();
"res.getContextInfo() = ".print();
res.getContextInfo().println();
"z.getContextInfo() = ".print();
z.getContextInfo().println();
//z.b.println();
//z.c.d.println();
__args__.println();
z.println();
z.c := 5;
z.c.println();
z.println();
Test ::= Object.extend("Test", {
    init := (this, who) : {
        this.long := 0;
        this.int := 0;
        this.stest := () : {
            "stest".println();
        }.staticmethod();
        "init: this := ".+(this).println();
        "init: class := ".+(this.getClass()).println();
        "init: super := ".+(this.getClass().getSuper()).println();
        "init: who := ".+(who).println();
    };
    ++ := (this) : {
        "++: this := ".+(this).println();
        "++: class := ".+(this.getClass()).println();
        this.long := this.long.+(10);
    };
    print := (this) : {
        "print: this := ".+(this).println();
        "print: class := ".+(this.getClass()).println();
        this.long.println();
    };
    toString := (this) : {
        this.stest();
        "This is an instance of class Test, ".+(this.getClass());
    };
    number := 0;
    no := (class, who) : {
        "no: class := ".+(class).println();
        "no: who := ".+(who).println();
    }.classmethod();
    yes := (who: String) : {
        "yes: who := ".+(who).println();
    }.staticmethod();
    maybe := (this, who) : {
        "maybe: this := ".+(this).println();
        "maybe: who := ".+(who).println();
    };
});
n := Test.new("yes");
"n: ".+(n).println();
"Test.getClass(): ".+(Test.getClass()).println();
"Test.getClass().getSuper() := ".+(Test.getClass().getSuper()).println();
"Test: ".+(Test).println();
"Test.getSuper() := ".+(Test.getSuper()).println();
"n.getClass(): ".+(n.getClass()).println();
"n.getClass().getSuper() := ".+(n.getClass().getSuper()).println();
"Object.getClass(): ".+(Object.getClass()).println();
"prop test: ".+(Test.getContextInfo()).println();
Test.no("you");
n.no("me");
Test.yes("you");
n.yes("me");
Test.maybe("you");
n.maybe("me");
//z.c.d.e.println();
(x := true.!()).println();
abc := {a := x.!();}();
abc.println();
x := 1;
b := {
    x := x.+(123);
    x.println();
    aaaa := {ffff := x.+(124);};
    aaaa();
    _.println();
};
b();
//aaaa.println();
b.getContextInfo().println();
b.println();
b..aaaa.println();
b.aaaa.ffff.println();

[0,1,2,3,4,5,6,8,9].forEach((it) : {
    "i: ".+(it).println();
});
0.to(10).println();
0.toInclusive(10).println();
acc := 0;
0.to(10).forEach((it) : {
    acc := acc.+(it);
});
acc.println();
acc.to(acc.+(5)).println();
acc.println();

assert(0.toInclusive(10).toString().==("[0,1,2,3,4,5,6,7,8,9,10]"), "0.toInclusive(10).toString() should be equal to '[0,1,2,3,4,5,6,7,8,9,10]'");
assert(acc.==(45), "acc should be equal to 45");

"".length().println();
"aaaa".length().println();
[1, 2].length().println();
[].length().println();

//in_test := input("insert somthing: ");
//in_test.println();

dtest := {};
dtest.t := "dtest";
dtest.t.println();
dtest.delete("t");
tryCatch({
    dtest.t.println();
}, {
    "OK".println();
});

//qw.println();
//qw.er := "qwer";
//qw.er.println();
//qw.println();
//qw.delete("qwer");
//qw.er.println();

iftest := (12.==("12")).thenElse({
    "equal".println();
    1;
},{
    0;
});
assert(0.==(iftest), "iftest should be equal to 0");

mod := import("mod/mod");
import("mod2");

mod.Sample.new("abc");

mod.getId().println();
mod.getContextInfo().println();
mod.inject(_);

Sample.new("def");

tryCatch({
    qqqq.qqqq := 0;
}, (error) : {
    "Correctly caught error with 'tryCatch': ".print();
    error.println();
});

assertFail({ qqqq.qqqq := 0; }, "This should have thrown an error");